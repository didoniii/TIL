9장 - 쿠키와 세션 중 쿠키부분


쿠키를 저장하는 방법 - 입력기능
 	1. Cookie클래스의 객체를 만든다.
		- javax.servlet.http패키지에 속함,
		- 이 클래스의 객체를 만들때는 쿠키의 이름과 값을 파라미터로 넘겨줘야한다.
 		   ex) Cookie cookie = new Cookie("AGE", "26");
		
	2. addCookie메서드를 호출한다.
		- 이 메서드는 웹 브라우저로 쿠키를 보내는 기능을 한다.
		- JSP페이지에서는 response 내장 객체에 대해, 
		서블릿 클래스에서는 doGet, doPost메서드의 두번째 파라미터에 대해
 		이 메서드를 호출해야하며, Cookie객체를 파라미터로 넘겨줘야한다.  
          		     ex) response.addCookie(cookie);

addCookie 메서드를 통해 웹 브라우저로 전송된 쿠키를 실제로 저장하는 일은 웹브라우저가 한다.
웹 브라우저는 쿠키를 저장할때 쿠키를 보낸 웹서버의 주소도 함께 저장해놓는다.



쿠키를 읽는 방법 -조회기능
	1. 웹 브라우저는 웹 서버가 아무런 요청을 하지 않아도 웹 서버로 URL을 보낼 때 마다
	그 URL에 포함된 웹 서버의 주소에 해당하는 모든 쿠키를 찾아서 웹 서버로 함께 보낸다.
	
	2. getCookies 메서드를 이용한다.
		-JSP페이지에서는  request내장 변수에 대해,
		서블릿 클래스에서는 doGet, doPost메서드 첫번째 파라미터에 대해 호출해야함
		-웹 브라우저가 보낸 모든 쿠키를 Cookie배열로 만들어서 리턴함
			->Cookie배열 변수에 리턴값을 받아야한다.
		ex) Cookie cookies[] = request.getCookies();

	3. getName 메서드 
		-getCookies메서드가 리턴한 Cookie배열에서 특정 쿠키 찾으려면
		그 배열의 Cookie객체를 하나씩 가져다 이름을 비교해서 찾을 수 밖에 없다.
		-> 쿠키 이름은 Cookie객체에 대해 getName이라는 메서드를 호출해서 구함.
		ex) String name = cookie.getName();

	4.getValue 메서드
		-원하는 이름의 Cookie객체를 찾은 다음에는
		그 객체에 대해 getValue메서드를 호출해서 값을 가져올 수 있다.
		ex) String value = cookie.getValue();


쿠키의 유효시간
	-setMaxAge(시간) 이용 : addCookie메서드 호출하기전에 
 		ex)cookie.setMaxAge(60*60); // 60초 * 60 =1시간


쿠키 변경 및 삭제
	-변경 : 같은 이름의 쿠키를 새로 생성해서 응답 데이터로 전송하면된다.

	-삭제 :  직접삭제X,
	           setMaxAge() 메서드를 호출할때 인자 값으로 0을 대입해서 수명을 0으로 만듦.
		ex) cookie.setMaxAge(0); -> 쿠키를 바로 삭제하도록 만드는 값
		     cookie.setMaxAge(-1); ->마이너스 값은 웹 브라우저가 끝날때 삭제되도록 함.


쿠키를 이용한 회원가입 ->Member1.java
	
	+Table생성
		create table member1 ( 
		id varchar2(12) primary key,
		 password varchar2(12) not null, 
		name varchar2(12) not null, 
		reg_date date not null);

MemberDao.java
	-DAO클래스 (Data Acess Object)
		: 데이터베이스에 접속해서 데이터의 추가, 삭제, 수정 등의 작업을 하는 클래스.

		:  일반적으로 JSP 혹은 Servlet에서 위의 로직을 함께 기술할 수도 있지만, 
		  유지보수 및 코드의 모듈화를 위해 별도의 DAO 클래스를 만들어 사용합니다.

		: 보통 한개의 테이블마다 한개의 DAO클래스를 작성.

		: DAO클래스는 테이블로 부터 데이터를 읽어와 자바 객체로 변환하거나
		  자바 객체의 값을 테이블에 저장한다. 

		: DAO클래스는 단 1개만 생성이 되도록, 싱글톤 패턴으로 만든다.

	

	- Connection : DB와 연결성을 갖는 인터페이스
		       DriverManager클래스의 getConnection()메서드를 실행함으로써 정의됨.
		       DataSource                     '' ->수업파일내용
		       데이터베이스와 연결된 세션 역할을 한다. 이세션을 이용하여 데이터베이스에
		       SQL을 전송하고 그 결과인 ResultSet객체를 얻어낸다.

	
	- getConnection()메서드
		 :  이 SQLServerDataSource 개체가 나타내는 데이터 원본과의 연결을 설정합니다.

+구글링

JNDI와 DBCP를 이용한 DB연동

	-작업순서
 		1. API 관련 jar 파일 설치 - lib폴더

		2. DBCP 정보 설정 - context.xml

		3. JNDI 리소스 사용 설정 - web.xml

		4. 자바 혹은 JSP 페이지에서 사용


 API
	API(Application Programming Interface 애플리케이션 프로그래밍 인터페이스,
	( 응용 프로그램 프로그래밍 인터페이스)는 응용 프로그램에서 사용할 수 있도록, 
	운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 뜻한다.


  Connection Pool 
	커넥션 풀 개념은 Connection객체를 프로그램이 실행될때마다 생성하는 것이 아니라,
	웹 애플리케이션이 서비스되기 전에 웹서버에서 미리 생성하여 준비한 다음, 필요할 때
	준비된 Connection을 가져다 사용함으로써 JDBC 프로그래밍의 문제점들을 개선한 기술.


  DataSource
	커넥션 풀에는 여러개의 Connection 객체가 생성되어 운용되는데,
	이를 직접 웹 애플리케이션에서 다루기 힘듦-> DataSource라는 개념 도임
 		- 커넥션 풀의 Connection을 관리하기 위한 객체
		- JNDI Server를 통해서 이용된다.
		- DataSource객체를 통해서 필요한 Connection을 획득, 반납 등의 작업을 한다.
	이용절차
		1. JNDI Server에서 lookup()메서드를 통해 DataSource객체를 획득한다.
		2. DataSource객체의 getConnection()메서드를 통해서 
		   Connection Pool에서 Free상태의 Connection 객체를 획득.
		3. Connection 객체를 통한 DBMS작업 수행
		4. 모든 작업이 끝나면 DataSource 객체를 통해 
		   Connection Pool 에 Connection을 반납한다.


  JNDI
	- JNDI(Java Naming and Directory Interface)는 디렉터리 서비스에서 제공하는
	 데이터 및 객체를 발견하고 참고하기 위한 자바 API다.

	Naming & Directory 서비스
  		- Naming & Directory 서비스는 실제 어떤 자원을 가지고 서비스 한다는
		 의미가 아니라, 어떤 서버나 애플리케이션에서 분산환경에 서비스하고자 
		 하는 자원을 이 Naming & Directory 서버에 이름값과 실제 자원을
		 연결하여 등록하면, 해당 자원을 이용하고자 하는 다른 애플리케이션에서
		  Naming & Directory 서버에 접근하여 이름값만을 가지고 자원을 연결하여
		 이용할 수 있게 하는 개념입니다.


(ex)
private Connection getConnection() {
		Connection conn = null;
		try {
			Context ctx = new InitialContext();
			DataSource ds = (DataSource)ctx.lookup("java:comp/env/jdbc/OracleDB");
			conn = ds.getConnection();
		}catch (Exception e) {
			System.out.println("연결 에러 : "+e.getMessage());
		}
		return conn;


META-INF >context.xml
<Context> 
	<Resource 
		name="jdbc/OracleDB" 
		auth="Container" 
		type="javax.sql.DataSource" 
		username="scott" 
		password="tiger" 
		driverClassName="oracle.jdbc.OracleDriver" 
		factory="org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory" 
		url="jdbc:oracle:thin:@127.0.0.1:1521:xe" 
		maxActive="10" 
		maxIdle="2"/> 
	<Resource 
		name="jdbc/MySql" 
		auth="Container" 
		type="javax.sql.DataSource" 
		username="root" 
		password="mysql" 
		driverClassName="com.mysql.cj.jdbc.Driver" 
		factory="org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory" 
		url="jdbc:mysql://127.0.0.1:3306/test?useSSL=true&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true"
		maxActive="10" 
		maxIdle="2"/>
</Context>

<Resource>태그의 속성
	- name : 현재 리소스를 등록할 이름을 지정합니다.
	- auth : 
  	- type : 리소스의 타입을 지정합니다. Connection Pool을 사용할 수있도록 해주는 
		객체의 javax.sqlDataSource입니다.
	- username : DB 서버에 로그인할 계정을 지정합니다.
	- password : DB 서버에 로그인할 게정의 비밀번호를 지정합니다.	
	- driverClassName : DB작업을 위해 로딩할 JDBC 드라이버 파일에 드라이버 인터페이스를
			 상속하는 파일명을 전체 이름으로 지정합니다. 
			 Class.forName() 메소드의 인자값입니다.
	- factory :
	- url : 접속할 DB 서버의 URL을 지정합니다.
	- maxActive : 생성할 Conneciton 수를 지정합니다.
	- maxIdle : 일반적으로 활용할 Connection 수를 지정합니다.
	- maxWait : Connection의 사용 요청이 있을 때 대기 시간을 지정합니다. 
		   5000은 5초를 의미하며, 5초가 지난 후에도 Connection을 얻지 못하면 
		   Exception이 발생합니다.



쿠키 이용하여 회원가입하기	-insert.jsp

<% request.setCharacterEncoding("utf-8");   %>  : jsp에서 값을 받을 때 한글로 된 값을 받으려면
 					  한글로 CharaterEncoding을 하여 받아야한다.
					   (<->Decoding)

<jsp:useBean> : 자바 인스턴스를 준비한다. 
                      보관소에서 자바 인스턴스를 꺼내거나 자바 인스턴스를 새로 만들어 보관소에 
	          저장하는 코드를 생성한다.

<jsp:setProperty> : 자바 빈의 프로퍼티 값을 설정한다.
                          자바 객체의 setter()를 호출하는 코드를 생성한다.

<jsp:getProperty> : 자바 빈의 프로퍼티 값을 꺼낸다.
                           자바 객체의 getter()를 호출하는 코드를 생성한다.

- getConnection()메서드
		 :  이 SQLServerDataSource 개체가 나타내는 데이터 원본과의 연결을 설정합니다.

PreparedStatement 인터페이스

+구글링

자바에서 데이터베이스로 쿼리문을 전송할 때 사용할 수 있는 인터페이스 2가지
	->Statement & PreparedStatement

	공통점
		1. SQL문을 전달하는 역할
		2. 사용시 반드시 try ~ catch 또는 throws (예외처리)를 해야한다.

	PreparedStatement 인터페이스
		- 데이터베이스 관리 시스템(DBMS)에서 동일하거나 비슷한 데이터베이스문을
		  높은 효율성으로 반복적으로 실행하기 위해 사용되는 기능.

	ex) String sql = "insert into member1 values(?,?,?,sysdate)";  ->미리 입력
		try { // 데이터 입력
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, member.getId());                  ㄱ
			pstmt.setString(2, member.getPassword());          |->?를 순서대로채움
			pstmt.setString(3, member.getName());             _|			
			result = pstmt.executeUpdate(); // 성공한 갯수
		}catch (Exception e) {	System.out.println(e.getMessage());



	Statement인터페이스랑 차이
		-아주 큰 차이는 바로 캐시(cache) 사용여부



쿠키 이용하여 로그인하기 -login.jsp

 .next() 
	: 선택한 요소의 다음 요소를 선택합니다.

		

ch09 쿠키와 세션 중 세션


session.setAttribute("속성명", "값"); ->세션생성
session.getAttribute("속성명") -> 저장된 속성 반환

Enumeration인터페이스
	- Collection 프레임 워크가 만들어지기전, Iterator이전버전이다.
	- Enumeration 인터페이스의 메서드
		1. hasMoreElements() : 읽어올 요소가 남아있는지 확인.
				      있으면 true, 없으면 false 
				      Iterator의 hasNext()와 같음.

		2. nextElement() : 다음 요소를 읽어옴.
			 	Iterator의 next()와 같음

session.invalidate(); ->세션을 종료하는 메서드






















